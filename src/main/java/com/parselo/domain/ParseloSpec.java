package com.parselo.domain;

import org.joda.beans.ImmutableBean;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;

import java.util.Map;
import java.util.NoSuchElementException;

import org.joda.beans.Bean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.parselo.utilities.ColumnIndexCalculator;

/**
 * Specification of an area to be parsed. Used by {@link com.parselo.Parselo}.
 */
@BeanDefinition
public final class ParseloSpec implements ImmutableBean {

  @PropertyDefinition(validate = "isPositiveNumber")
  private final int rowStart;

  @PropertyDefinition(validate = "isPositiveNumber")
  private final int rowEnd;

  @PropertyDefinition(validate = "isExcelColumn")
  private final String cellStart;

  @PropertyDefinition(validate = "isExcelColumn")
  private final String cellEnd;

  private static void isPositiveNumber(int value, String propertyName) {
    if (value < 0) {
      throw new IllegalArgumentException(propertyName + " expected to be a positive number but was '" + value + "'");
    }
  }

  private static void isExcelColumn(String value, String propertyName) {
    JodaBeanUtils.notBlank(value, propertyName);
    if (!value.matches("[a-zA-Z]*")) {
      throw new IllegalArgumentException(propertyName + " expected to be a valid column name (e.g. 'A', 'bb', 'ZAA') " +
          "but was '" + value + "'");
    }
  }

  public int getCellStartNumber() {
    return ColumnIndexCalculator.compute(cellStart);
  }

  public int getCellEndNumber() {
    return ColumnIndexCalculator.compute(cellEnd);
  }

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code ParseloSpec}.
   * @return the meta-bean, not null
   */
  public static ParseloSpec.Meta meta() {
    return ParseloSpec.Meta.INSTANCE;
  }

  static {
    MetaBean.register(ParseloSpec.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static ParseloSpec.Builder builder() {
    return new ParseloSpec.Builder();
  }

  private ParseloSpec(
      int rowStart,
      int rowEnd,
      String cellStart,
      String cellEnd) {
    isPositiveNumber(rowStart, "rowStart");
    isPositiveNumber(rowEnd, "rowEnd");
    isExcelColumn(cellStart, "cellStart");
    isExcelColumn(cellEnd, "cellEnd");
    this.rowStart = rowStart;
    this.rowEnd = rowEnd;
    this.cellStart = cellStart;
    this.cellEnd = cellEnd;
  }

  @Override
  public ParseloSpec.Meta metaBean() {
    return ParseloSpec.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the rowStart.
   * @return the value of the property
   */
  public int getRowStart() {
    return rowStart;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the rowEnd.
   * @return the value of the property
   */
  public int getRowEnd() {
    return rowEnd;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the cellStart.
   * @return the value of the property
   */
  public String getCellStart() {
    return cellStart;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the cellEnd.
   * @return the value of the property
   */
  public String getCellEnd() {
    return cellEnd;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ParseloSpec other = (ParseloSpec) obj;
      return (rowStart == other.rowStart) &&
          (rowEnd == other.rowEnd) &&
          JodaBeanUtils.equal(cellStart, other.cellStart) &&
          JodaBeanUtils.equal(cellEnd, other.cellEnd);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(rowStart);
    hash = hash * 31 + JodaBeanUtils.hashCode(rowEnd);
    hash = hash * 31 + JodaBeanUtils.hashCode(cellStart);
    hash = hash * 31 + JodaBeanUtils.hashCode(cellEnd);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(160);
    buf.append("ParseloSpec{");
    buf.append("rowStart").append('=').append(rowStart).append(',').append(' ');
    buf.append("rowEnd").append('=').append(rowEnd).append(',').append(' ');
    buf.append("cellStart").append('=').append(cellStart).append(',').append(' ');
    buf.append("cellEnd").append('=').append(JodaBeanUtils.toString(cellEnd));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ParseloSpec}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code rowStart} property.
     */
    private final MetaProperty<Integer> rowStart = DirectMetaProperty.ofImmutable(
        this, "rowStart", ParseloSpec.class, Integer.TYPE);
    /**
     * The meta-property for the {@code rowEnd} property.
     */
    private final MetaProperty<Integer> rowEnd = DirectMetaProperty.ofImmutable(
        this, "rowEnd", ParseloSpec.class, Integer.TYPE);
    /**
     * The meta-property for the {@code cellStart} property.
     */
    private final MetaProperty<String> cellStart = DirectMetaProperty.ofImmutable(
        this, "cellStart", ParseloSpec.class, String.class);
    /**
     * The meta-property for the {@code cellEnd} property.
     */
    private final MetaProperty<String> cellEnd = DirectMetaProperty.ofImmutable(
        this, "cellEnd", ParseloSpec.class, String.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "rowStart",
        "rowEnd",
        "cellStart",
        "cellEnd");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 32649896:  // rowStart
          return rowStart;
        case -925118303:  // rowEnd
          return rowEnd;
        case 1619122208:  // cellStart
          return cellStart;
        case 663122969:  // cellEnd
          return cellEnd;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public ParseloSpec.Builder builder() {
      return new ParseloSpec.Builder();
    }

    @Override
    public Class<? extends ParseloSpec> beanType() {
      return ParseloSpec.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code rowStart} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Integer> rowStart() {
      return rowStart;
    }

    /**
     * The meta-property for the {@code rowEnd} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Integer> rowEnd() {
      return rowEnd;
    }

    /**
     * The meta-property for the {@code cellStart} property.
     * @return the meta-property, not null
     */
    public MetaProperty<String> cellStart() {
      return cellStart;
    }

    /**
     * The meta-property for the {@code cellEnd} property.
     * @return the meta-property, not null
     */
    public MetaProperty<String> cellEnd() {
      return cellEnd;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 32649896:  // rowStart
          return ((ParseloSpec) bean).getRowStart();
        case -925118303:  // rowEnd
          return ((ParseloSpec) bean).getRowEnd();
        case 1619122208:  // cellStart
          return ((ParseloSpec) bean).getCellStart();
        case 663122969:  // cellEnd
          return ((ParseloSpec) bean).getCellEnd();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code ParseloSpec}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<ParseloSpec> {

    private int rowStart;
    private int rowEnd;
    private String cellStart;
    private String cellEnd;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(ParseloSpec beanToCopy) {
      this.rowStart = beanToCopy.getRowStart();
      this.rowEnd = beanToCopy.getRowEnd();
      this.cellStart = beanToCopy.getCellStart();
      this.cellEnd = beanToCopy.getCellEnd();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 32649896:  // rowStart
          return rowStart;
        case -925118303:  // rowEnd
          return rowEnd;
        case 1619122208:  // cellStart
          return cellStart;
        case 663122969:  // cellEnd
          return cellEnd;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 32649896:  // rowStart
          this.rowStart = (Integer) newValue;
          break;
        case -925118303:  // rowEnd
          this.rowEnd = (Integer) newValue;
          break;
        case 1619122208:  // cellStart
          this.cellStart = (String) newValue;
          break;
        case 663122969:  // cellEnd
          this.cellEnd = (String) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public ParseloSpec build() {
      return new ParseloSpec(
          rowStart,
          rowEnd,
          cellStart,
          cellEnd);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the rowStart.
     * @param rowStart  the new value
     * @return this, for chaining, not null
     */
    public Builder rowStart(int rowStart) {
      isPositiveNumber(rowStart, "rowStart");
      this.rowStart = rowStart;
      return this;
    }

    /**
     * Sets the rowEnd.
     * @param rowEnd  the new value
     * @return this, for chaining, not null
     */
    public Builder rowEnd(int rowEnd) {
      isPositiveNumber(rowEnd, "rowEnd");
      this.rowEnd = rowEnd;
      return this;
    }

    /**
     * Sets the cellStart.
     * @param cellStart  the new value
     * @return this, for chaining, not null
     */
    public Builder cellStart(String cellStart) {
      isExcelColumn(cellStart, "cellStart");
      this.cellStart = cellStart;
      return this;
    }

    /**
     * Sets the cellEnd.
     * @param cellEnd  the new value
     * @return this, for chaining, not null
     */
    public Builder cellEnd(String cellEnd) {
      isExcelColumn(cellEnd, "cellEnd");
      this.cellEnd = cellEnd;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(160);
      buf.append("ParseloSpec.Builder{");
      buf.append("rowStart").append('=').append(JodaBeanUtils.toString(rowStart)).append(',').append(' ');
      buf.append("rowEnd").append('=').append(JodaBeanUtils.toString(rowEnd)).append(',').append(' ');
      buf.append("cellStart").append('=').append(JodaBeanUtils.toString(cellStart)).append(',').append(' ');
      buf.append("cellEnd").append('=').append(JodaBeanUtils.toString(cellEnd));
      buf.append('}');
      return buf.toString();
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
