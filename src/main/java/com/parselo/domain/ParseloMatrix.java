package com.parselo.domain;

import org.joda.beans.ImmutableBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;

import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.function.BiFunction;

import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.TypedMetaBean;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.MinimalMetaBean;

/**
 * Represents the result of parsing a matrix area using Parselo.
 *
 * @param <T> the type of the value stored in the matrix.
 */
@BeanDefinition(style = "minimal", metaScope = "private", builderScope = "package")
public final class ParseloMatrix<T> implements ImmutableBean {

  @PropertyDefinition(validate = "notNull")
  private final ImmutableList<ImmutableList<T>> rows;

  public static <T> ParseloMatrix<T> of(int rows, int columns, BiFunction<Integer, Integer, T> valueProvider) {
    LinkedList<ImmutableList<T>> rowList = Lists.newLinkedList();

    for (int row = 0; row < rows; row++) {
      ImmutableList.Builder<T> columnList = ImmutableList.builder();
      for (int col = 0; col < columns; col++) {
        columnList.add(valueProvider.apply(row, col));
      }
      rowList.add(columnList.build());
    }

    return new ParseloMatrix<>(rowList);
  }

  //---------------------------------------------------------------
  public ImmutableList<T> getRow(int row) {
    validateRow(row);
    return rows.get(row);
  }

  public T getElement(int row, int column) {
    validateRow(row);
    validateColumn(column);
    return rows.get(row).get(column);
  }

  public int rowCount() {
    return rows.size();
  }

  public int columnCount() {
    return rows.get(0).size();
  }

  //---------------------------------------------------------------
  private void validateRow(int rowIdx) {
    if (rowIdx > rows.size() || rowIdx < 0) {
      throw new IndexOutOfBoundsException(String.format(
          "Row index %d is outside of bounds [%d ; %d]]",
          rowIdx,
          0,
          rows.size()));
    }
  }

  private void validateColumn(int columnIdx) {
    if (columnIdx < 0 || columnIdx > rows.get(0).size()) {
      throw new IndexOutOfBoundsException(String.format(
          "Row index %d is outside of bounds [%d ; %d]]",
          columnIdx,
          0,
          rows.get(0).size()));
    }
  }

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code ParseloMatrix}.
   */
  @SuppressWarnings({"unchecked", "rawtypes" })
  private static final MetaBean META_BEAN =
      MinimalMetaBean.of(
          ParseloMatrix.class,
          new String[] {
              "rows"},
          () -> new ParseloMatrix.Builder(),
          b -> b.getRows());

  /**
   * The meta-bean for {@code ParseloMatrix}.
   * @return the meta-bean, not null
   */
  public static MetaBean meta() {
    return META_BEAN;
  }

  static {
    MetaBean.register(META_BEAN);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @param <T>  the type
   * @return the builder, not null
   */
  static <T> ParseloMatrix.Builder<T> builder() {
    return new ParseloMatrix.Builder<>();
  }

  private ParseloMatrix(
      List<ImmutableList<T>> rows) {
    JodaBeanUtils.notNull(rows, "rows");
    this.rows = ImmutableList.copyOf(rows);
  }

  @Override
  @SuppressWarnings("unchecked")
  public TypedMetaBean<ParseloMatrix<T>> metaBean() {
    return (TypedMetaBean<ParseloMatrix<T>>) META_BEAN;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the rows.
   * @return the value of the property, not null
   */
  public ImmutableList<ImmutableList<T>> getRows() {
    return rows;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  Builder<T> toBuilder() {
    return new Builder<>(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ParseloMatrix<?> other = (ParseloMatrix<?>) obj;
      return JodaBeanUtils.equal(rows, other.rows);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(rows);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("ParseloMatrix{");
    buf.append("rows").append('=').append(JodaBeanUtils.toString(rows));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code ParseloMatrix}.
   * @param <T>  the type
   */
  static final class Builder<T> extends DirectFieldsBeanBuilder<ParseloMatrix<T>> {

    private List<ImmutableList<T>> rows = ImmutableList.of();

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(ParseloMatrix<T> beanToCopy) {
      this.rows = beanToCopy.getRows();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3506649:  // rows
          return rows;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder<T> set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 3506649:  // rows
          this.rows = (List<ImmutableList<T>>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder<T> set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public ParseloMatrix<T> build() {
      return new ParseloMatrix<>(
          rows);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the rows.
     * @param rows  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder<T> rows(List<ImmutableList<T>> rows) {
      JodaBeanUtils.notNull(rows, "rows");
      this.rows = rows;
      return this;
    }

    /**
     * Sets the {@code rows} property in the builder
     * from an array of objects.
     * @param rows  the new value, not null
     * @return this, for chaining, not null
     */
    @SafeVarargs
    public final Builder<T> rows(ImmutableList<T>... rows) {
      return rows(ImmutableList.copyOf(rows));
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("ParseloMatrix.Builder{");
      buf.append("rows").append('=').append(JodaBeanUtils.toString(rows));
      buf.append('}');
      return buf.toString();
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
